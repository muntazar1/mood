#!/usr/bin/python3
import os
import sys
import multiprocessing


sys.path.insert(0, os.environ["VIRTUAL_ENV"] + "/lib")
sys.path.insert(0, os.environ["VIRTUAL_ENV"] + "/tools/decode")

from rich.console import Console
from rich.syntax import Syntax

from decode_algorithms import MAGIC_NUMBERS, ZIP_MAGIC_NUMBER
from decode_algorithms import DecodingAlgorithms
from telegram_api import TelegramApi

SIZE = __import__('size').Size
console = Console()


def data(filename):
    if not os.path.isfile(filename):
        exit(f"# file not found!: {filename}")

    with open(filename, "rb") as bfile:
        content = bfile.read()

    if content[:4] in MAGIC_NUMBERS:
        file_type = "pyc"
        output = content

    elif ZIP_MAGIC_NUMBER in content:
        file_type = "zip"
        output = filename

    else:
        try:
            with open(filename, "r") as file:
                file_type = "py"
                output = file.read()
        except UnicodeDecodeError:
            file_type = "?"
            output = None

    print(f"File type ( {file_type} )")
    return output


def show_code():
    if type(decoding_algorithms.file_data) == str:
        print('')
        syntax = Syntax(decoding_algorithms.file_data, "python")
        console.print(syntax)


def show_file_size(file):
    print(f"# \033[1;32msize: {SIZE(file).size}\033[0m")


if __name__ == '__main__':
    if len(sys.argv) == 4 and sys.argv[3].lower() == "@psh_team":
        os.system("clear")
        total_layers = 0
        copy = False
        hash_type = {}
        while True:
            print(f"@psh_team <developer mode> total layers: {total_layers}")
            if not copy:
                content = data(sys.argv[1])
                copy = True
            else:
                content = data(sys.argv[2])

            try:
                decoding_algorithms = DecodingAlgorithms(content, sys.argv[2], hash_type)
            except KeyboardInterrupt:
                print(f"\r# \033[1;31mstopped!\033[0m")
                break

            total_layers += 1
            if type(decoding_algorithms.file_data) == str:
                show_file_size(sys.argv[2])
            console = Console()
            p = multiprocessing.Process(target=show_code)
            p.start()
            p.join(2)
            if p.is_alive():
                p.kill()
                print("# \033[1;33mcan't show the code because the file is to big!\033[0m")
            print("")
            if decoding_algorithms.file_data == content:
                break
            if input("Press [enter] to continue\nor [n] to stop\n: ").lower() == "n":
                if not input("Send to telegram channel?\n [enter/n]: ").lower() == "n":
                    TelegramApi(hash_type)
                    print("DONE 200")
                break
            os.system("clear")

    elif len(sys.argv) == 3:
        DecodingAlgorithms(data(sys.argv[1]), sys.argv[2], {})

    else:
        print("USAGE:\n decode file.py output.py\n decode file.py output.py @psh_team")
